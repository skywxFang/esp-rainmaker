<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="esp__rmaker__standard__devices_8h" kind="file" language="C++">
    <compoundname>esp_rmaker_standard_devices.h</compoundname>
    <includes local="no">stdint.h</includes>
    <includes local="no">stdbool.h</includes>
    <includes local="no">esp_err.h</includes>
    <includes refid="esp__rmaker__core_8h" local="no">esp_rmaker_core.h</includes>
    <incdepgraph>
      <node id="29">
        <label>stdbool.h</label>
      </node>
      <node id="28">
        <label>stdint.h</label>
      </node>
      <node id="27">
        <label>/Users/wangfang/github/esp-rainmaker/components/esp_rainmaker/include/esp_rmaker_standard_devices.h</label>
        <link refid="esp_rmaker_standard_devices.h"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>esp_err.h</label>
      </node>
      <node id="32">
        <label>esp_event.h</label>
      </node>
      <node id="31">
        <label>esp_rmaker_core.h</label>
        <link refid="esp__rmaker__core_8h_source"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="esp__rmaker__standard__devices_8h_1a50101171d54ee2ba726a1fb8bb773e82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_rmaker_device_t *</type>
        <definition>esp_rmaker_device_t* esp_rmaker_switch_device_create</definition>
        <argsstring>(const char *dev_name, void *priv_data, bool power)</argsstring>
        <name>esp_rmaker_switch_device_create</name>
        <param>
          <type>const char *</type>
          <declname>dev_name</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>priv_data</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>power</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a standard Switch device</para><para>This creates a Switch device with the mandatory parameters and also assigns the primary parameter. The default parameter names will be used. Refer <ref refid="esp__rmaker__standard__params_8h_source" kindref="compound">esp_rmaker_standard_params.h</ref> for default names.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dev_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The unique device name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">priv_data</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional) Private data associated with the device. This should stay allocated throughout the lifetime of the device #</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">power</parametername>
</parameternamelist>
<parameterdescription>
<para>Default value of the mandatory parameter &quot;power&quot;</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Device handle on success. </para></simplesect>
<simplesect kind="return"><para>NULL in case of failures. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/wangfang/github/esp-rainmaker/components/esp_rainmaker/include/esp_rmaker_standard_devices.h" line="40" column="1"/>
      </memberdef>
      <memberdef kind="function" id="esp__rmaker__standard__devices_8h_1a3bc15356ba42ed79a4c72b5b209c55a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_rmaker_device_t *</type>
        <definition>esp_rmaker_device_t* esp_rmaker_lightbulb_device_create</definition>
        <argsstring>(const char *dev_name, void *priv_data, bool power)</argsstring>
        <name>esp_rmaker_lightbulb_device_create</name>
        <param>
          <type>const char *</type>
          <declname>dev_name</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>priv_data</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>power</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a standard Lightbulb device</para><para>This creates a Lightbulb device with the mandatory parameters and also assigns the primary parameter. The default parameter names will be used. Refer <ref refid="esp__rmaker__standard__params_8h_source" kindref="compound">esp_rmaker_standard_params.h</ref> for default names.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dev_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The unique device name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">priv_data</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional) Private data associated with the device. This should stay allocated throughout the lifetime of the device </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">power</parametername>
</parameternamelist>
<parameterdescription>
<para>Default value of the mandatory parameter &quot;power&quot;</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Device handle on success. </para></simplesect>
<simplesect kind="return"><para>NULL in case of failures. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/wangfang/github/esp-rainmaker/components/esp_rainmaker/include/esp_rmaker_standard_devices.h" line="57" column="1"/>
      </memberdef>
      <memberdef kind="function" id="esp__rmaker__standard__devices_8h_1ae66ffdebf4acb3fd8b7b79fccb7b2065" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_rmaker_device_t *</type>
        <definition>esp_rmaker_device_t* esp_rmaker_fan_device_create</definition>
        <argsstring>(const char *dev_name, void *priv_data, bool power)</argsstring>
        <name>esp_rmaker_fan_device_create</name>
        <param>
          <type>const char *</type>
          <declname>dev_name</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>priv_data</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>power</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a standard Fan device</para><para>This creates a Fan device with the mandatory parameters and also assigns the primary parameter. The default parameter names will be used. Refer <ref refid="esp__rmaker__standard__params_8h_source" kindref="compound">esp_rmaker_standard_params.h</ref> for default names.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dev_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The unique device name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">priv_data</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional) Private data associated with the device. This should stay allocated throughout the lifetime of the device </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">power</parametername>
</parameternamelist>
<parameterdescription>
<para>Default value of the mandatory parameter &quot;power&quot;</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Device handle on success. </para></simplesect>
<simplesect kind="return"><para>NULL in case of failures. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/wangfang/github/esp-rainmaker/components/esp_rainmaker/include/esp_rmaker_standard_devices.h" line="74" column="1"/>
      </memberdef>
      <memberdef kind="function" id="esp__rmaker__standard__devices_8h_1a0f80a6a3ed44462cec2703c0b58c4475" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_rmaker_device_t *</type>
        <definition>esp_rmaker_device_t* esp_rmaker_temp_sensor_device_create</definition>
        <argsstring>(const char *dev_name, void *priv_data, float temperature)</argsstring>
        <name>esp_rmaker_temp_sensor_device_create</name>
        <param>
          <type>const char *</type>
          <declname>dev_name</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>priv_data</declname>
        </param>
        <param>
          <type>float</type>
          <declname>temperature</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a standard Temperature Sensor device</para><para>This creates a Temperature Sensor device with the mandatory parameters and also assigns the primary parameter. The default parameter names will be used. Refer <ref refid="esp__rmaker__standard__params_8h_source" kindref="compound">esp_rmaker_standard_params.h</ref> for default names.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dev_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The unique device name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">priv_data</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional) Private data associated with the device. This should stay allocated throughout the lifetime of the device </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">temperature</parametername>
</parameternamelist>
<parameterdescription>
<para>Default value of the mandatory parameter &quot;temperature&quot;</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Device handle on success. </para></simplesect>
<simplesect kind="return"><para>NULL in case of failures. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/wangfang/github/esp-rainmaker/components/esp_rainmaker/include/esp_rmaker_standard_devices.h" line="91" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2020<sp/>Espressif<sp/>Systems<sp/>(Shanghai)<sp/>PTE<sp/>LTD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;esp_err.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;esp_rmaker_core.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal">{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal">esp_rmaker_device_t<sp/>*esp_rmaker_switch_device_create(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dev_name,</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*priv_data,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>power);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal">esp_rmaker_device_t<sp/>*esp_rmaker_lightbulb_device_create(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dev_name,</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*priv_data,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>power);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal">esp_rmaker_device_t<sp/>*esp_rmaker_fan_device_create(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dev_name,</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*priv_data,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>power);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal">esp_rmaker_device_t<sp/>*esp_rmaker_temp_sensor_device_create(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dev_name,</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*priv_data,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>temperature);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/Users/wangfang/github/esp-rainmaker/components/esp_rainmaker/include/esp_rmaker_standard_devices.h"/>
  </compounddef>
</doxygen>
