<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="esp__rmaker__utils_8h" kind="file" language="C++">
    <compoundname>esp_rmaker_utils.h</compoundname>
    <includes local="no">esp_idf_version.h</includes>
    <includes local="no">esp_sntp.h</includes>
    <includes local="no">stdint.h</includes>
    <includes local="no">esp_err.h</includes>
    <includes local="no">esp_heap_caps.h</includes>
    <includes local="no">sdkconfig.h</includes>
    <incdepgraph>
      <node id="78">
        <label>esp_heap_caps.h</label>
      </node>
      <node id="76">
        <label>stdint.h</label>
      </node>
      <node id="75">
        <label>esp_sntp.h</label>
      </node>
      <node id="77">
        <label>esp_err.h</label>
      </node>
      <node id="79">
        <label>sdkconfig.h</label>
      </node>
      <node id="74">
        <label>esp_idf_version.h</label>
      </node>
      <node id="73">
        <label>/Users/wangfang/github/esp-rainmaker/components/rmaker_common/include/esp_rmaker_utils.h</label>
        <link refid="esp_rmaker_utils.h"/>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="structesp__rmaker__time__config" prot="public">esp_rmaker_time_config</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="esp__rmaker__utils_8h_1a9470b7be8aef65ff2a544e7b0586388d" prot="public" static="no">
        <name>MEM_ALLOC_EXTRAM</name>
        <param><defname>size</defname></param>
        <initializer>malloc(size)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/wangfang/github/esp-rainmaker/components/rmaker_common/include/esp_rmaker_utils.h" line="37" column="10" bodyfile="/Users/wangfang/github/esp-rainmaker/components/rmaker_common/include/esp_rmaker_utils.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="esp__rmaker__utils_8h_1acc9c752b2a54bddae23e6e1559e4a984" prot="public" static="no">
        <name>MEM_CALLOC_EXTRAM</name>
        <param><defname>num</defname></param>
        <param><defname>size</defname></param>
        <initializer>calloc(num, size)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/wangfang/github/esp-rainmaker/components/rmaker_common/include/esp_rmaker_utils.h" line="38" column="9" bodyfile="/Users/wangfang/github/esp-rainmaker/components/rmaker_common/include/esp_rmaker_utils.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="esp__rmaker__utils_8h_1a339fe190c0327a2b0beb310fe6e4025b" prot="public" static="no">
        <name>MEM_REALLOC_EXTRAM</name>
        <param><defname>ptr</defname></param>
        <param><defname>size</defname></param>
        <initializer>realloc(ptr, size)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/wangfang/github/esp-rainmaker/components/rmaker_common/include/esp_rmaker_utils.h" line="39" column="9" bodyfile="/Users/wangfang/github/esp-rainmaker/components/rmaker_common/include/esp_rmaker_utils.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="esp__rmaker__utils_8h_1acf67d196ca85bd759d0b03d7c593d4e4" prot="public" static="no">
        <type>struct <ref refid="structesp__rmaker__time__config" kindref="compound">esp_rmaker_time_config</ref></type>
        <definition>typedef struct esp_rmaker_time_config  esp_rmaker_time_config_t</definition>
        <argsstring></argsstring>
        <name>esp_rmaker_time_config_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/wangfang/github/esp-rainmaker/components/rmaker_common/include/esp_rmaker_utils.h" line="51" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="esp__rmaker__utils_8h_1a80da4dfce9c5a82fee2bba8328e7660a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t esp_rmaker_reboot</definition>
        <argsstring>(int8_t seconds)</argsstring>
        <name>esp_rmaker_reboot</name>
        <param>
          <type>int8_t</type>
          <declname>seconds</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reboot the device after a delay</para><para>This API just starts a reboot timer and returns immediately. The actual reboot is trigerred asynchronously in the timer callback. This is useful if you want to reboot after a delay, to allow other tasks to finish their operations (Eg. MQTT publish to indicate OTA success). The RMAKER_EVENT_REBOOT event is triggered when the reboot timer is started.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">seconds</parametername>
</parameternamelist>
<parameterdescription>
<para>Time in seconds after which the device should reboot.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ESP_OK on success. </para></simplesect>
<simplesect kind="return"><para>error on failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/wangfang/github/esp-rainmaker/components/rmaker_common/include/esp_rmaker_utils.h" line="66" column="1"/>
      </memberdef>
      <memberdef kind="function" id="esp__rmaker__utils_8h_1adca5a782ea9892fd91544f51a1f9b53c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t esp_rmaker_wifi_reset</definition>
        <argsstring>(int8_t reset_seconds, int8_t reboot_seconds)</argsstring>
        <name>esp_rmaker_wifi_reset</name>
        <param>
          <type>int8_t</type>
          <declname>reset_seconds</declname>
        </param>
        <param>
          <type>int8_t</type>
          <declname>reboot_seconds</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reset Wi-Fi credentials and (optionally) reboot</para><para>This will reset just the Wi-Fi credentials and (optionally) trigger a reboot. This is useful when you want to keep all the entries in NVS memory intact, but just change the Wi-Fi credentials. The RMAKER_EVENT_WIFI_RESET event is triggered when this API is called. The actual reset will happen after a delay if reset_seconds is not zero.</para><para><simplesect kind="note"><para>This reset and reboot operations will happen asynchronously depending on the values passed to the API.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">reset_seconds</parametername>
</parameternamelist>
<parameterdescription>
<para>Time in seconds after which the reset should get triggered. This will help other modules take some actions before the device actually resets. If set to zero, the operation would be performed immediately. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">reboot_seconds</parametername>
</parameternamelist>
<parameterdescription>
<para>Time in seconds after which the device should reboot. If set to negative value, the device will not reboot at all.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ESP_OK on success. </para></simplesect>
<simplesect kind="return"><para>error on failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/wangfang/github/esp-rainmaker/components/rmaker_common/include/esp_rmaker_utils.h" line="88" column="1"/>
      </memberdef>
      <memberdef kind="function" id="esp__rmaker__utils_8h_1a7dce82cf21b32f019d70b6bec61da3c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t esp_rmaker_factory_reset</definition>
        <argsstring>(int8_t reset_seconds, int8_t reboot_seconds)</argsstring>
        <name>esp_rmaker_factory_reset</name>
        <param>
          <type>int8_t</type>
          <declname>reset_seconds</declname>
        </param>
        <param>
          <type>int8_t</type>
          <declname>reboot_seconds</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reset to factory defaults and reboot</para><para>This will clear entire NVS partition and (optionally) trigger a reboot. The RMAKER_EVENT_FACTORY_RESET event is triggered when this API is called. The actual reset will happen after a delay if reset_seconds is not zero.</para><para><simplesect kind="note"><para>This reset and reboot operations will happen asynchronously depending on the values passed to the API.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">reset_seconds</parametername>
</parameternamelist>
<parameterdescription>
<para>Time in seconds after which the reset should get triggered. This will help other modules take some actions before the device actually resets. If set to zero, the operation would be performed immediately. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">reboot_seconds</parametername>
</parameternamelist>
<parameterdescription>
<para>Time in seconds after which the device should reboot. If set to negative value, the device will not reboot at all.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ESP_OK on success. </para></simplesect>
<simplesect kind="return"><para>error on failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/wangfang/github/esp-rainmaker/components/rmaker_common/include/esp_rmaker_utils.h" line="108" column="1"/>
      </memberdef>
      <memberdef kind="function" id="esp__rmaker__utils_8h_1a8a1d409b5aea00cae53d32a9e3c2295e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t esp_rmaker_time_sync_init</definition>
        <argsstring>(esp_rmaker_time_config_t *config)</argsstring>
        <name>esp_rmaker_time_sync_init</name>
        <param>
          <type><ref refid="structesp__rmaker__time__config" kindref="compound">esp_rmaker_time_config_t</ref> *</type>
          <declname>config</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize time synchronization</para><para>This API initializes SNTP for time synchronization.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">config</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration to be used for SNTP time synchronization. The default configuration is used if NULL is passed.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ESP_OK on success </para></simplesect>
<simplesect kind="return"><para>error on failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/wangfang/github/esp-rainmaker/components/rmaker_common/include/esp_rmaker_utils.h" line="119" column="1"/>
      </memberdef>
      <memberdef kind="function" id="esp__rmaker__utils_8h_1aa67517e023311c6aa2efe98b9ef29dd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool esp_rmaker_time_check</definition>
        <argsstring>(void)</argsstring>
        <name>esp_rmaker_time_check</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if current time is updated</para><para>This API checks if the current system time is updated against the reference time of 1-Jan-2019.</para><para><simplesect kind="return"><para>true if time is updated </para></simplesect>
<simplesect kind="return"><para>false if time is not updated </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/wangfang/github/esp-rainmaker/components/rmaker_common/include/esp_rmaker_utils.h" line="128" column="1"/>
      </memberdef>
      <memberdef kind="function" id="esp__rmaker__utils_8h_1a2bcb72a5d28f01ff252fa12807b813f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t esp_rmaker_time_wait_for_sync</definition>
        <argsstring>(uint32_t ticks_to_wait)</argsstring>
        <name>esp_rmaker_time_wait_for_sync</name>
        <param>
          <type>uint32_t</type>
          <declname>ticks_to_wait</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Wait for time synchronization</para><para>This API waits for the system time to be updated against the reference time of 1-Jan-2019. This is a blocking call.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ticks_to_wait</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of ticks to wait for time synchronization. Accepted values: 0 to portMAX_DELAY.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ESP_OK on success </para></simplesect>
<simplesect kind="return"><para>error on failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/wangfang/github/esp-rainmaker/components/rmaker_common/include/esp_rmaker_utils.h" line="140" column="1"/>
      </memberdef>
      <memberdef kind="function" id="esp__rmaker__utils_8h_1a19718e769f5a584e1e1f90bca3fa4ac0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t esp_rmaker_time_set_timezone_posix</definition>
        <argsstring>(const char *tz_posix)</argsstring>
        <name>esp_rmaker_time_set_timezone_posix</name>
        <param>
          <type>const char *</type>
          <declname>tz_posix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set POSIX timezone</para><para>Set the timezone (TZ environment variable) as per the POSIX format specified in the <ulink url="https://www.gnu.org/software/libc/manual/html_node/TZ-Variable.html">GNU libc documentation</ulink>. Eg. For China: &quot;CST-8&quot; For US Pacific Time (including daylight saving information): &quot;PST8PDT,M3.2.0,M11.1.0&quot;</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">tz_posix</parametername>
</parameternamelist>
<parameterdescription>
<para>NULL terminated TZ POSIX string</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ESP_OK on success </para></simplesect>
<simplesect kind="return"><para>error on failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/wangfang/github/esp-rainmaker/components/rmaker_common/include/esp_rmaker_utils.h" line="154" column="1"/>
      </memberdef>
      <memberdef kind="function" id="esp__rmaker__utils_8h_1a6abcdba8d2b4d9730c05e9f7b9901bb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t esp_rmaker_time_set_timezone</definition>
        <argsstring>(const char *tz)</argsstring>
        <name>esp_rmaker_time_set_timezone</name>
        <param>
          <type>const char *</type>
          <declname>tz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set timezone location string</para><para>Set the timezone as a user friendly location string. Check <ulink url="https://rainmaker.espressif.com/docs/time-service.html">here</ulink> for a list of valid values.</para><para>Eg. For China: &quot;Asia/Shanghai&quot; For US Pacific Time: &quot;America/Los_Angeles&quot;</para><para><simplesect kind="note"><para>Setting timezone using this API internally also sets the POSIX timezone string.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">tz</parametername>
</parameternamelist>
<parameterdescription>
<para>NULL terminated Timezone location string</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ESP_OK on success </para></simplesect>
<simplesect kind="return"><para>error on failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/wangfang/github/esp-rainmaker/components/rmaker_common/include/esp_rmaker_utils.h" line="171" column="1"/>
      </memberdef>
      <memberdef kind="function" id="esp__rmaker__utils_8h_1aadc04b92d97ba00b5d714c8007852efe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* esp_rmaker_time_get_timezone_posix</definition>
        <argsstring>(void)</argsstring>
        <name>esp_rmaker_time_get_timezone_posix</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the current POSIX timezone</para><para>This fetches the current timezone in POSIX format, read from NVS.</para><para><simplesect kind="return"><para>Pointer to a NULL terminated POSIX timezone string on success. Freeing this is the responsibility of the caller. </para></simplesect>
<simplesect kind="return"><para>NULL on failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/wangfang/github/esp-rainmaker/components/rmaker_common/include/esp_rmaker_utils.h" line="181" column="1"/>
      </memberdef>
      <memberdef kind="function" id="esp__rmaker__utils_8h_1a47575b413248f50ab9f2a4fccfdaa7f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* esp_rmaker_time_get_timezone</definition>
        <argsstring>(void)</argsstring>
        <name>esp_rmaker_time_get_timezone</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the current timezone</para><para>This fetches the current timezone in POSIX format, read from NVS.</para><para><simplesect kind="return"><para>Pointer to a NULL terminated timezone string on success. Freeing this is the responsibility of the caller. </para></simplesect>
<simplesect kind="return"><para>NULL on failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/wangfang/github/esp-rainmaker/components/rmaker_common/include/esp_rmaker_utils.h" line="191" column="1"/>
      </memberdef>
      <memberdef kind="function" id="esp__rmaker__utils_8h_1a5503680a394dbddfbc67a698c034a2dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t esp_rmaker_get_local_time_str</definition>
        <argsstring>(char *buf, size_t buf_len)</argsstring>
        <name>esp_rmaker_get_local_time_str</name>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buf_len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get printable local time string</para><para>Get a printable local time string, with information of timezone and Daylight Saving. Eg. &quot;Tue Sep  1 09:04:38 2020 -0400[EDT], DST: Yes&quot; &quot;Tue Sep  1 21:04:04 2020 +0800[CST], DST: No&quot;</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a pre-allocated buffer into which the time string will be populated. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">buf_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the above buffer.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ESP_OK on success </para></simplesect>
<simplesect kind="return"><para>error on failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/wangfang/github/esp-rainmaker/components/rmaker_common/include/esp_rmaker_utils.h" line="207" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2021<sp/>Espressif<sp/>Systems<sp/>(Shanghai)<sp/>PTE<sp/>LTD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;esp_idf_version.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>ESP_IDF_VERSION<sp/>&gt;=<sp/>ESP_IDF_VERSION_VAL(4,<sp/>4,<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;esp_sntp.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sntp.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;esp_err.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;esp_heap_caps.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sdkconfig.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal">{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(CONFIG_SPIRAM_SUPPORT<sp/>&amp;&amp;<sp/>(CONFIG_SPIRAM_USE_CAPS_ALLOC<sp/>||<sp/>CONFIG_SPIRAM_USE_MALLOC))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MEM_ALLOC_EXTRAM(size)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>heap_caps_malloc_prefer(size,<sp/>2,<sp/>MALLOC_CAP_DEFAULT<sp/>|<sp/>MALLOC_CAP_SPIRAM,<sp/>MALLOC_CAP_DEFAULT<sp/>|<sp/>MALLOC_CAP_INTERNAL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MEM_CALLOC_EXTRAM(num,<sp/>size)<sp/><sp/><sp/>heap_caps_calloc_prefer(num,<sp/>size,<sp/>2,<sp/>MALLOC_CAP_DEFAULT<sp/>|<sp/>MALLOC_CAP_SPIRAM,<sp/>MALLOC_CAP_DEFAULT<sp/>|<sp/>MALLOC_CAP_INTERNAL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MEM_REALLOC_EXTRAM(ptr,<sp/>size)<sp/><sp/>heap_caps_realloc_prefer(ptr,<sp/>size,<sp/>2,<sp/>MALLOC_CAP_DEFAULT<sp/>|<sp/>MALLOC_CAP_SPIRAM,<sp/>MALLOC_CAP_DEFAULT<sp/>|<sp/>MALLOC_CAP_INTERNAL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MEM_ALLOC_EXTRAM(size)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>malloc(size)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MEM_CALLOC_EXTRAM(num,<sp/>size)<sp/><sp/><sp/>calloc(num,<sp/>size)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MEM_REALLOC_EXTRAM(ptr,<sp/>size)<sp/><sp/>realloc(ptr,<sp/>size)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="structesp__rmaker__time__config" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structesp__rmaker__time__config" kindref="compound">esp_rmaker_time_config</ref><sp/>{</highlight></codeline>
<codeline lineno="44" refid="structesp__rmaker__time__config_1a4ff53b20931dc566b393020098860467" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structesp__rmaker__time__config_1a4ff53b20931dc566b393020098860467" kindref="member">sntp_server_name</ref>;</highlight></codeline>
<codeline lineno="50" refid="structesp__rmaker__time__config_1a944cd07119272db29b5e5b81a0950e32" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>sntp_sync_time_cb_t<sp/><ref refid="structesp__rmaker__time__config_1a944cd07119272db29b5e5b81a0950e32" kindref="member">sync_time_cb</ref>;</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}<sp/><ref refid="structesp__rmaker__time__config" kindref="compound">esp_rmaker_time_config_t</ref>;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal">esp_err_t<sp/>esp_rmaker_reboot(int8_t<sp/>seconds);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal">esp_err_t<sp/>esp_rmaker_wifi_reset(int8_t<sp/>reset_seconds,<sp/>int8_t<sp/>reboot_seconds);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal">esp_err_t<sp/>esp_rmaker_factory_reset(int8_t<sp/>reset_seconds,<sp/>int8_t<sp/>reboot_seconds);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal">esp_err_t<sp/>esp_rmaker_time_sync_init(<ref refid="structesp__rmaker__time__config" kindref="compound">esp_rmaker_time_config_t</ref><sp/>*config);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>esp_rmaker_time_check(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal">esp_err_t<sp/>esp_rmaker_time_wait_for_sync(uint32_t<sp/>ticks_to_wait);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal">esp_err_t<sp/>esp_rmaker_time_set_timezone_posix(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*tz_posix);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal">esp_err_t<sp/>esp_rmaker_time_set_timezone(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*tz);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*esp_rmaker_time_get_timezone_posix(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*esp_rmaker_time_get_timezone(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal">esp_err_t<sp/>esp_rmaker_get_local_time_str(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buf_len);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/Users/wangfang/github/esp-rainmaker/components/rmaker_common/include/esp_rmaker_utils.h"/>
  </compounddef>
</doxygen>
